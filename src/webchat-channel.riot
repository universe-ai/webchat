<webchat-channel>
    <!-- Messages -->
    <div id="messagesList" class="px-6 py-4 flex-1 overflow-y-scroll">
        <div each={ message in state.messages } class="flex items-start mb-4 text-base">
            <div class="w-10 h-10 rounded mr-3">
                <minidenticon-svg username={message.publicKey} saturation="60" lightness="50"></minidenticon-svg>
            </div>
            <div class="flex-1 -mt-1 overflow-hidden">
                <div>
                    <span class="font-bold">{ message.publicKey }</span>
                    <span class="text-gray-400 text-xs ml-2">{ message.creationTimestamp }</span>
                </div>
                <p if={!message.hasBlob} class="text-black leading-normal"><raw html={ message.text }/></p>
                <div if={message.hasBlob && !(message.imgSrc || message.attSrc)}>
                    Loading attachment...
                </div>
                <div if={message.imgSrc}>
                    <img src={message.imgSrc} title={message.msg}
                        style="max-height:240px;"
                    />
                </div>
                <div if={message.attSrc}>
                    Attachment:
                    <a href={message.attSrc} target="_blank"
                        style="color:blue;"
                        rel="noopener noreferrer">
                        {message.text || "Save attachment"}
                    </a>&nbsp;({message.blobLength} bytes)
                </div>
            </div>
        </div>
    </div>

    <div id="chatAreaInput" class="pb-6 px-4 flex-none">
        <div class="flex rounded-lg border-2 border-gray-500 overflow-hidden">
            <label for="chatAreaInputFile" class="cursor-pointer text-3xl bg-blue-500 hove:bg-blue-700 font-bold text-gray-400 border-r-2 border-gray-400 p-2 focus:outline-none focus:shadow-outline">
                <svg class="fill-current h-6 w-6 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M16 10c0 .553-.048 1-.601 1H11v4.399c0 .552-.447.601-1 .601-.553 0-1-.049-1-.601V11H4.601C4.049 11 4 10.553 4 10c0-.553.049-1 .601-1H9V4.601C9 4.048 9.447 4 10 4c.553 0 1 .048 1 .601V9h4.399c.553 0 .601.447.601 1z"/></svg>
            </label>
            <button id="chatAreaInputFileRemove" class="text-3xl text-red-600 border-r-2 border-gray-400 p-2 hidden" onclick={ clearMessageAndFileInputs }>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                </svg>
            </button>
            <input id="chatAreaNewMessage" type="text" class="w-full px-4 outline-double outline-gray-100" placeholder="Type message" />
            <input type="file" id="chatAreaInputFile" accept="*/*" class="hidden">
            <!--<p>PNG, GIF, JPEG, BMP, SVG, TIFF, WebP (max. 65KB)</p>-->
            <button class="text-3xl text-gray-400 border-r-2 border-gray-400 p-2" onclick={ submitMessage }>
                <svg class="fill-current h-6 w-6 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M17.218,2.268L2.477,8.388C2.13,8.535,2.164,9.05,2.542,9.134L9.33,10.67l1.535,6.787c0.083,0.377,0.602,0.415,0.745,0.065l6.123-14.74C17.866,2.46,17.539,2.134,17.218,2.268 M3.92,8.641l11.772-4.89L9.535,9.909L3.92,8.641z M11.358,16.078l-1.268-5.613l6.157-6.157L11.358,16.078z"/>
                </svg>
            </button>
        </div>
    </div>

    <script>
        import raw from "./raw.riot"

        export default {
            components: {
                raw
            },

            onBeforeMount(props, state) {
                // This controller instance will be stored to state.presence.controller.
                new this.props.Globals.ChannelController(this.state, {Globals: props.Globals, service: props.service, node: props.channel.node})
                    .onUpdate(() => this.update());
            },

            onBeforeUnmount(props, state) {
                this.state.controller.close();
            },

            onMounted(props, state) {
                // Register <ENTER> key press as shortcut to submitMessage action

                //dialog = thisRef.$("dialog");
                this.$("#chatAreaNewMessage").addEventListener("keypress", (event) => {
                    if(event.key === "Enter") {
                        this.submitMessage(event);
                    }
                });

                // Register file input dialog change event
                this.$("#chatAreaInputFile").addEventListener("change", (event) => {
                    const file = event.target.files[0];
                    if(file) {
                        const messageElement = this.$("#chatAreaNewMessage");
                        if(messageElement) {
                            messageElement.value = file.name;
                            messageElement.disabled = true;
                            this.$("#chatAreaInputFileRemove").classList.remove("hidden");
                        }

                        this.update();
                    }
                });
            },

            onUpdated() {
                const messagesList = this.$("#messagesList");

                if(messagesList) {
                    messagesList.scrollTop = messagesList.scrollHeight;
                }
            },

            submitMessage(event) {
                event.preventDefault();

                const messageElement = this.$("#chatAreaNewMessage");

                const message = messageElement.value;

                const fileElement = this.$("#chatAreaInputFile");
                const file = fileElement.files[0];

                this.clearMessageAndFileInputs();

                this.state.controller.submitMessage(message, file);
            },

            clearMessageAndFileInputs(event) {
                const messageElement = this.$("#chatAreaNewMessage");
                messageElement.value = "";
                messageElement.disabled = false;

                const fileElement = this.$("#chatAreaInputFile");
                fileElement.value = "";
                const fileElementRemove = this.$("#chatAreaInputFileRemove");
                fileElementRemove.classList.add("hidden");
            }
        }
    </script>
</webchat-channel>
