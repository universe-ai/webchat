<webchat-channel>
    <!-- Messages -->
    <div id="messagesList_{props.item.id1.toString("hex")}" class="px-6 py-4 flex-1 overflow-y-scroll">
        <div class="flex items-start mb-4 text-base">
            <button class="border-r-2 border-gray-4 text-blue-600"
                onclick={()=>this.export()}>Export messages
            </button>
        </div>
        <div class="flex items-start mb-4 text-base">
            <button class="border-r-2 border-gray-4 text-blue-600"
                onclick={()=>this.state.controller.loadHistory()}>Load more
            </button>
        </div>
        <div each={ item in state.controller?.getItems() } class="flex items-start mb-4 text-base" id="message_{props.item.id1.toString("hex")}_{item.data.id1}">
            <div class="w-10 h-10 rounded mr-3">
                <minidenticon-svg username={item.data.publicKey} saturation="60" lightness="50"></minidenticon-svg>
            </div>
            <div class="flex-1 -mt-1 overflow-hidden">
                <div>
                    <span class="font-bold">{ item.data.publicKey }</span>
                    <span class="text-gray-400 text-xs ml-2">{ item.data.creationTimestamp }</span>
                </div>

                <p if={!item.data.hasBlob} class="text-black leading-normal">
                    <raw htmlWithLinks={ item.data.text }/>
                </p>

                <template if={item.data.hasBlob}>

                    <div if={item.data.imgSrc}>
                        <img src={item.data.imgSrc} alt={item.data.text}
                            style="max-height:240px;"
                        />
                    </div>

                    <div if={item.data.attSrc} class="italic">
                        <a href={item.data.attSrc} target="_blank"
                            style="color:blue;"
                            rel="noopener noreferrer">
                            {item.data.text || "Save attachment"}
                        </a>&nbsp;({item.data.blobLength} bytes)
                    </div>

                    <template if={!item.data.imgSrc && !item.data.attSrc}>

                        <template if={item.data.uploadInfo}>
                            <div if={item.data.uploadInfo.text} class="italic">
                                {item.data.uploadInfo.text}
                            </div>

                            <div if={item.data.uploadInfo?.downloadLink} class="italic">
                                &nbsp;<a href="#" onclick={ () => state.controller.download(item.node, item.data) }
                                    style="color:blue;"
                                    rel="noopener noreferrer">{item.data.uploadInfo.downloadLink}</a>
                            </div>

                            <div if={item.data.uploadInfo?.uploadLink} class="italic">
                                &nbsp;<a href="#" onclick={ () => state.controller.reupload(item.node, item.data) }
                                    style="color:blue;"
                                    rel="noopener noreferrer">{item.data.uploadInfo.uploadLink}</a>
                            </div>

                            <div if={item.data.uploadInfo?.throughput} class="italic">
                                {item.data.uploadInfo.throughput}
                            </div>

                        </template>

                        <template if={item.data.downloadInfo}>
                            <div if={item.data.downloadInfo?.error} class="italic">
                                {item.data.downloadInfo.error}
                            </div>

                            <div if={item.data.downloadInfo?.throughput} class="italic">
                                {item.data.downloadInfo.throughput}
                            </div>

                            <div if={item.data.downloadInfo?.linkText} class="italic">
                                &nbsp;<a href="#" onclick={ () => state.controller.download(item.node, item.data) }
                                    style="color:blue;"
                                    rel="noopener noreferrer">{item.data.downloadInfo.linkText}</a>
                            </div>
                        </template>

                    </template>

                </template>
            </div>
        </div>
    </div>

    <div id="chatAreaInput_{props.item.id1.toString("hex")}" class="pb-6 px-4 flex-none">
        <div if={state.hashing}>
            Hashing file contents... This can take a while.
        </div>
        <div class="flex rounded-lg border-2 border-gray-500 overflow-hidden">
            <label for="chatAreaInputFile_{props.item.id1.toString("hex")}" class="cursor-pointer text-3xl bg-blue-500 hove:bg-blue-700 font-bold text-gray-400 border-r-2 border-gray-400 p-2 focus:outline-none focus:shadow-outline">
                <svg class="fill-current h-6 w-6 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M16 10c0 .553-.048 1-.601 1H11v4.399c0 .552-.447.601-1 .601-.553 0-1-.049-1-.601V11H4.601C4.049 11 4 10.553 4 10c0-.553.049-1 .601-1H9V4.601C9 4.048 9.447 4 10 4c.553 0 1 .048 1 .601V9h4.399c.553 0 .601.447.601 1z"/></svg>
            </label>
            <button id="chatAreaInputFileRemove_{props.item.id1.toString("hex")}" class="text-3xl text-red-600 border-r-2 border-gray-400 p-2 hidden" onclick={ clearMessageAndFileInputs }>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                </svg>
            </button>
            <input id="chatAreaNewMessage_{props.item.id1.toString("hex")}" type="text" class="w-full px-4 outline-double outline-gray-100" placeholder="Type message" />
            <input type="file" id="chatAreaInputFile_{props.item.id1.toString("hex")}" accept="*/*" class="hidden">
            <!--<p>PNG, GIF, JPEG, BMP, SVG, TIFF, WebP (max. 65KB)</p>-->
            <button class="text-3xl text-gray-400 border-r-2 border-gray-400 p-2" onclick={ submitMessage }>
                <svg class="fill-current h-6 w-6 block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M17.218,2.268L2.477,8.388C2.13,8.535,2.164,9.05,2.542,9.134L9.33,10.67l1.535,6.787c0.083,0.377,0.602,0.415,0.745,0.065l6.123-14.74C17.866,2.46,17.539,2.134,17.218,2.268 M3.92,8.641l11.772-4.89L9.535,9.909L3.92,8.641z M11.358,16.078l-1.268-5.613l6.157-6.157L11.358,16.078z"/>
                </svg>
            </button>
        </div>
    </div>

    <script>
        import raw from "./raw.riot"

        export default {
            components: {
                raw
            },

            onBeforeMount(props, state) {
                state.controller = new this.props.Globals.ChannelController({Globals: props.Globals, service: props.service, node: props.item.node})

                state.controller.onUpdate((obj) => this.update(obj));

                // Post message to global PresenceController.
                state.controller.onNotification( () =>
                        window.postMessage({action: "NEW_MESSAGE"}));

                state.isPristineScroll = true;
            },

            onBeforeUnmount(props, state) {
                this.state.controller.close();
            },

            onMounted(props, state) {
                // Register <ENTER> key press as shortcut to submitMessage action

                //dialog = thisRef.$("dialog");
                this.$(`#chatAreaNewMessage_${this.props.item.id1.toString("hex")}`).addEventListener("keypress", (event) => {
                    if(event.key === "Enter") {
                        this.submitMessage(event);
                    }
                });

                // Register file input dialog change event
                this.$(`#chatAreaInputFile_${this.props.item.id1.toString("hex")}`).addEventListener("change", (event) => {
                    const file = event.target.files[0];
                    if(file) {
                        const messageElement = this.$(`#chatAreaNewMessage_${this.props.item.id1.toString("hex")}`);
                        if(messageElement) {
                            messageElement.value = file.name;
                            messageElement.disabled = true;
                            this.$(`#chatAreaInputFileRemove_${this.props.item.id1.toString("hex")}`).classList.remove("hidden");
                        }

                        this.update();
                    }
                });
            },

            onBeforeUpdate(props, state) {
                const messagesList = this.$(`#messagesList_${this.props.item.id1.toString("hex")}`);

                if (state.isPristineScroll === true) {
                    state.scrollFollow = true;

                    if (messagesList.scrollHeight > 0) {
                        state.isPristineScroll = false;
                    }
                }
                else {
                    state.scrollFollow = messagesList.scrollTop === messagesList.scrollHeight - messagesList.clientHeight;
                }
            },

            onUpdated(props, state) {
                if (state.scrollFollow) {
                    const messagesList = this.$(`#messagesList_${this.props.item.id1.toString("hex")}`);

                    if(messagesList) {
                        messagesList.scrollTop = messagesList.scrollHeight - messagesList.clientHeight;
                    }
                }
            },

            submitMessage(event) {
                event.preventDefault();

                const messageElement = this.$(`#chatAreaNewMessage_${this.props.item.id1.toString("hex")}`);

                const messageText = messageElement.value;

                const fileElement = this.$(`#chatAreaInputFile_${this.props.item.id1.toString("hex")}`);
                const file = fileElement.files[0];

                this.clearMessageAndFileInputs();

                this.state.controller.submitMessage(messageText, file);
            },

            clearMessageAndFileInputs(event) {
                const messageElement = this.$(`#chatAreaNewMessage_${this.props.item.id1.toString("hex")}`);
                messageElement.value = "";
                messageElement.disabled = false;

                const fileElement = this.$(`#chatAreaInputFile_${this.props.item.id1.toString("hex")}`);
                fileElement.value = "";
                const fileElementRemove = this.$(`#chatAreaInputFileRemove_${this.props.item.id1.toString("hex")}`);
                fileElementRemove.classList.add("hidden");
            },

            export(event) {
                // Prepare data
                let data = "";

                // Add information disclaimer
                data += "Information notice: this file potentially contains internal, sensitive, restricted and/or confidential information\n";

                // Add license information
                data += "License(s): " + "UNKNOWN" + "\n";

                // Add ruler
                data += "==================================================================================================================\n";

                const items = this.state.controller.getItems();
                for(let i=0; i<items.length; i++) {
                    const itemData = items[i].data;
                    data += itemData.publicKey + "\n";
                    data += itemData.creationTimestamp + "\n";
                    data += itemData.text + "\n";
                    data += "\n";
                }

                // Create new resource with data contents
                const file = new File([data], {
                    type: "text/plain"
                });

                // Create temporary link element
                const anchorElement = document.createElement("a");
                anchorElement.style = "hidden";
                document.body.appendChild(anchorElement);
                anchorElement.href = URL.createObjectURL(file);
                anchorElement.download = "webchat_" + this.state.controller.getName().name + "_" + (new Date().toISOString().split('T')[0]) + ".txt";

                // Trigger download and cleanup resources
                anchorElement.click();
                URL.revokeObjectURL(anchorElement.href);
                anchorElement.remove();
            }
        }
    </script>
</webchat-channel>
