<app>
    <hr />
    <!-- Set up flex container with screen limited to viewport and more pleasant font settings -->
    <div class="flex font-sans subpixel-antialiased h-screen">
        <div class="flex-none w-64 pb-6 hidden bg-bakgrund-3 md:block">
            <div class="flex mb-2 mt-3 px-4 text-rubriker justify-between">
                <div class="flex-auto">
                    <h1 class="mb-1 font-bold text-xl text-rubriker leading-snug truncate">
                        Space Chat
                    </h1>
                    <div class="h-5">
                    </div>
                    <div class="flex flex-row">
                        <button id="connectionModalButton" class="basis-1/5 -py-2 text-green-500 bg-white box-border w-10 border-2 border-green-500 shadow-lg shadow-green-400" type="button">
                            <img src={ state.picture } class="w-10 h-10">
                        </button>
                        <div class="basis-4/5 -px-8 ml-2">
                            <div class="flex flex-col font-bold">
                                <div class="text-underrubriker text-base opacity-80">
                                    { state.name }
                                </div>
                                <div class="w-40 text-underrubriker text-sm font-light italic opacity-80 truncate overflow-hidden text-ellipsis">
                                    { state.bio }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="h-5">
                    </div>
                </div>
            </div>

            <div class="mb-8">
                <div class="px-4 mb-2 text-rubriker flex justify-between items-center">
                    <div class="opacity-75">
                        Active
                    </div>
                    <div>
                        <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z"/>
                        </svg>
                    </div>
                </div>
                <div each={ presence in (state.presence?.list ?? []) } class="flex items-center mb-3 px-4">
                    <svg if={presence.active} class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20"
                        style="width: 22px">
                        <circle cx="10" cy="10" r="10">
                    </svg>
                    <svg if={!presence.active} class="h-2 w-2 stroke-current text-rubriker mr-2" viewBox="0 0 22 22"
                        style="width: 22px">
                        <circle cx="11" cy="11" r="9" fill="none" stroke-width="3">
                    </svg>
                    <span class="text-rubriker opacity-75"
                        id="presence_{presence.publicKey.toString("hex")}"
                        onclick={showUserInfo}
                        style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                        {presence.publicKey.toString("hex")}
                        <span if={ presence.isSelf} class="px-2 text-gray-400 text-sm italic">you</span>
                    </span>
                </div>
            </div>

            <div class="mb-8">
                <div class="px-4 mb-2 text-rubriker flex justify-between items-center">
                    <div class="opacity-75">
                        Channels
                    </div>
                    <div>
                        <a onclick={newChannel}>
                            <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M11 9h4v2h-4v4H9v-4H5V9h4V5h2v4zm-1 11a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" />
                            </svg>
                        </a>
                    </div>
                </div>
                <div class="py-1 px-4 bg-lankar text-rubriker">
                    # SC2
                </div>
                <div class="py-1 px-4 text-rubriker">
                    # Random
                </div>
            </div>

            <div class="mb-8">
                <div class="flex px-4 mb-2 text-rubriker justify-between items-center">
                    <div class="opacity-75">
                        Direct Messages
                    </div>
                    <div>
                        <svg class="fill-current h-4 w-4 opacity-50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M14 8a4 4 0 1 0-8 0v7h8V8zM8.027 2.332A6.003 6.003 0 0 0 4 8v6l-3 2v1h18v-1l-3-2V8a6.003 6.003 0 0 0-4.027-5.668 2 2 0 1 0-3.945 0zM12 18a2 2 0 1 1-4 0h4z" fill-rule="evenodd" />
                        </svg>
                    </div>
                </div>

                <div each={channel in state.channels}
                    if={channel.isDirect}
                    onclick={channelClicked}
                    class="flex items-center mb-3 px-4">

                    <svg class="h-2 w-2 mr-2 fill-current text-green-500" viewBox="0 0 20 20">
                        <circle cx="10" cy="10" r="10">
                    </svg>

                    <span class="text-rubriker opacity-75">
                        {channel.name}
                    </span>
                </div>
            </div>
        </div>

        <!-- Main area: chat -->
        <div id="chatArea" class="flex flex-1 flex-col bg-white overflow-hidden">
            <!-- Channel header -->
            <div class="bg-bakgrund-1 border-b flex px-6 py-2 items-center flex-none">
                <div class="flex flex-col">
                    <h3 class="text-rubriker mb-1 font-extrabold">
                        { state.chatAreaTitle }
                    </h3>
                    <div class="text-underrubriker text-normal text-sm truncate">
                        { state.chatAreaDescription }
                    </div>
                </div>

                <div class="flex flex-col">
                    <div if={state.error}>
                        <p>Error: {state.error}</p>
                    </div>

                    <div if={!state.universe.isActive()}
                        style="display: block; background-color: yellow;">

                        <h1>Please activate the UniverseAI Data Wallet browser extension
                            by clicking on the icon in your browser toolbar.</h1>
                    </div>

                    <button if={state.universe.isActive() && !state.universe.isAuthed()}
                        type="button" onclick={ auth }>

                        Authenticate with Data Wallet
                    </button>
                </div>

                <div class="ml-auto hidden md:block">
                    <div id="chatAreaSearch" class="relative">
                        <input type="search" placeholder="Search" class="appearance-none border border-gray-400 rounded-lg pl-8 pr-4 py-2">
                        <div class="absolute -mt-7 pin-y pin-l pl-3 flex items-center justify-center">
                            <svg class="fill-current text-gray-400 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                <path d="M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z" />
                            </svg>
                        </div>
                    </div>
                </div>
            </div>

            <webchat-channel
                each={channel in state.channels}
                class="{channel.active ? "" : "non-visible"}"
                Globals={props.Globals}
                service={props.service}
                channel={channel}>
            </webchat-channel>
        </div>
    </div>

    <script>
        import * as riot from "riot";

        import universeJson from "./universe.json";

        import WebChatDialogUserInfo from "./webchat-dialog-user-info.riot";

        export default {
            onBeforeMount(props, state) {
                ["mousemove", "keydown", "touchstart"].forEach( (eventName) => {
                    document.addEventListener(eventName, () => {
                        this.state.presence.controller?.activityDetected();
                    }, true);
                });

                const universe = new this.props.Globals.Universe();

                universe.onActive( () => {
                    this.update();
                });

                this.state = {
                    universe,
                    presence: {}, // typeof PresenceState
                    channels: [], // {node}[]
                };
            },

            async auth() {
                if (this.state.service) {
                    return;
                }

                try {
                    await this.state.universe.auth();
                    this.connect();
                }
                catch(e) {
                    this.update({
                        error: e.message,
                    });
                }
            },

            async connect() {
                if (!this.state.universe.isAuthed()) {
                    return;
                }

                const universeConf = this.props.Globals.ParseUtil.ParseUniverseConf(universeJson);

                const service = await this.state.universe.initService(universeConf);

                service.onStorageConnect( () => {
                    console.info("Connected to storage");
                    this.handleStorageConnect();
                });

                service.onStorageClose( () => {
                    console.error("Disconnected from storage");
                    this.handleStorageClose();

                });

                service.onConnectionError( (e) => {
                    console.info("Connection error", `${e.e.error}`);
                });

                service.onConnectionConnect( (e) => {
                    const pubKey = e.p2pClient.getRemotePublicKey();
                    console.info(`Peer just connected to service, peer's publicKey is ${pubKey.toString("hex")}`);
                });

                service.onConnectionClose( (e) => {
                    const pubKey = e.p2pClient.getRemotePublicKey();
                    console.info(`Peer disconnected, who has publicKey ${pubKey.toString("hex")}`);
                });

                this.update({
                    service,
                });

                service.start();
            },

            handleStorageConnect() {
                this.update({
                    connected: true,
                });

                /*this.initChannels();*/

                // This PresenceController will write to state.presence.
                // This controller instance will be stored as state.presence.controller.
                new this.props.Globals.PresenceController(this.state.presence, this.state.service)
                    .onUpdate(() => this.update());

                // This ChannelsController will by default write to state.channels.
                // This instance will be stored as state.channels.controller.
                // new this.props.Globals.ChannelsController(this.state, this.state.service);
            },

            handleStorageClose() {
                this.update({
                    connected: false,
                });
            },

            async showUserInfo(event) {
                const publicKey = Buffer.from(event.target.id.split('_')[1], "hex");

                const modal = riot.component(WebChatDialogUserInfo)
                    (this.root.appendChild(document.createElement("DIV")), {publicKey});

                const ret = await modal.showModal();

                if (!ret) {
                    return;
                }

                if (ret.action === "message") {
                    this.startPrivateChat(publicKey);
                }
            },
        }
    </script>

    <style>
        .non-visible {
            visibility: hidden;
        }
    </style>
</app>
